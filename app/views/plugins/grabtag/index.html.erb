<% title "GrabTag jQuery Plugin" %>

<%- content_for :content_splash do -%>
<%= content_tag :h2, "GragTag jQuery Plugin" %>
<%- end -%>

<p id="navigation">
  <a href="#example1">Example 1</a>
  <a href="#example2">Example 2</a>
  <a href="#config">Configuration</a>
  <a href="#limitations">Limitations</a>
  <a href="#download">Download</a>
</p>

<h3><a name="example1">Example 1</a>: Marking-Up Bibliographic Citations</h3>
<p>Select text within the citation, click a tag type, then expand/contract a tagged region to refine. Right-click a tag to remove it.</p>

<div id="grab-tag">
<div id="grabtag-initializer" class="clear"></div>
<% @references.each do |reference| %>
<p class="biblio-selector"><%= raw reference %></p>
<% end %>
</div>

<%= form_tag("/selectors", :method => "POST", :autocomplete => "off") do %>
  <%= text_area_tag "grabtag-output", "", :size => "40x5" %>
  <div>
    <!--<%= submit_tag "Submit", :class => "form-button submit-button" %>-->
    <%= submit_tag "Clear All", :class => "form-button clear-button", :type => "reset" %>
  </div>
<% end %>

<h4>Example 1 Configuration</h4>
<xmp><html>
<head>
<script type="text/javascript" src="jquery-1.7.1.min.js"></script>
<script type="text/javascript" src="jquery.grabtag.js"></script>
<script type="text/javascript" src="jquery.contextMenu.js"></script>
<script type="text/javascript">
$(function(){
  $('.biblio-selector').grabtag({
    'config_ele'   : '#grabtag-initializer'
    'multitag'     : false,
    'tags'         : {
       "journal" : [
         { "author"  : { 'background-color' : '#8dd3c7' }},
         { "date"    : { 'background-color' : '#ffa1ff' }},
         { "title"   : { 'background-color' : '#ffffb3' }},
         { "journal" : { 'background-color' : '#79fc72' }},
         { "volume"  : { 'background-color' : '#72f3fc' }},
         { "pages"   : { 'background-color' : '#7284fc', 'color' : '#fff' }},
         { "doi"     : { 'background-color' : '#ffabab' }} ],
       "book" : [
         { "author"      : { 'background-color' : '#8dd3c7' }},
         { "date"        : { 'background-color' : '#ffa1ff' }},
         { "title"       : { 'background-color' : '#ffffb3' }},
         { "booktitle"   : { 'background-color' : '#d19a41', 'color' : '#fff' }},
         { "pages"       : { 'background-color' : '#7284fc', 'color' : '#fff' }},
         { "edition"     : { 'background-color' : '#fb8072' }},
         { "editor"      : { 'background-color' : '#948669', 'color' : '#fff' }},
         { "publisher"   : { 'background-color' : '#fdb562' }},
         { "institution" : { 'background-color' : '#000', 'color' : '#fff' }},
         { "location"    : { 'background-color' : '#bfbada' }},
         { "isbn"        : { 'background-color' : '#80b1d3' }},
         { "doi"         : { 'background-color' : '#ffabab' }} ],
       "extra" : [ "note", "container", "retrieved", "tech", "translator", "unknown", "url" ]
    },
    'active_group' : 'journal',
    'onActivate'   : function(obj, data) {
      $('#grabtag-output').val(data.content);
      $('[data-grabtag="volume"]', '#grabtag-initializer').parent().hide();
    },
    'onMultitagWarning' : function(obj, tag) {
      alert($(tag).attr("data-grabtag") + " has already been used");
    },
    'onTag'        : function(obj, tag, data) {
       $('#grabtag-output').val(data.content);
       $(tag).parent().hide();
       console.log(data);
    },
    'onTagResize'  : function(obj, data) {
       $('#grabtag-output').val(data.content);
       console.log(data);
    },
    'onTagRemove'  : function(obj, data) {
       $('#grabtag-output').val(data.content);
       $('#grabtag-initializer').find('[data-grabtag=' + data.tag.type + ']').parent().show();
       console.log(data);
    }
  });
});
</script>
</head>
<body>
<div id="grabtag-initializer" class="clearfix"></div>
<p class="biblio-selector">Buddle, C.M. and D.P. Shorthouse. (2008). Effects of experimental harvesting on spider (Araneae) assemblages in boreal deciduous forests. The Canadian Entomologist <span data-grabtag="volume">140(4)</span>: 437-452, 10.4039/n07-LS01</p>
<textarea id="grabtag-output"></textarea>
</body>
</html></xmp>

<h3><a name="example2">Example 2</a>: Marking-up Free-form Text (Sticky Buttons)</h3>
<div id="freeform-config" class="clear"></div>
<p class="freeform">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce sodales nunc pharetra orci venenatis laoreet semper enim molestie. Fusce aliquet sagittis lobortis. Vivamus in nisi sem, vitae accumsan massa. Donec bibendum, ipsum a fringilla placerat, mi mi tincidunt mauris, sed dapibus diam odio in dui. Curabitur in tincidunt ipsum. Pellentesque posuere leo libero. Maecenas sit amet urna et magna varius tincidunt. Pellentesque urna ante, ornare vitae suscipit eu, tempus eu elit. Fusce id turpis quis massa lobortis sodales. Integer in nulla lectus, in tincidunt elit. Sed tempus malesuada sem ac faucibus. Aenean eleifend consectetur nisl ut consectetur. Nulla facilisi. Cras ullamcorper tincidunt convallis. Suspendisse varius vestibulum tortor eget egestas.</p>
<%= form_tag("/selectors", :method => "POST", :autocomplete => "off") do %>
  <%= text_area_tag "freeform-output", "", :size => "40x2" %>
<% end %>

<h4>Example 2 Configuration</h4>
<xmp><script type="text/javascript">
  var config = {
    tags       : ["taxon" : { "background-color" : "#80b1d3", "color" : "#fff"}, "size", "shape"],
    sticky     : true,
    sticky_tag : 'size',
    config_ele : '#freeform-config',
    onTag      : function(obj, tag, data) {
      obj = null; tag = null;
      var offset = 'offset:start=' + data.tag.offset.start + ', offset:end=' + data.tag.offset.end;
      $("#freeform-output").val(data.tag.type + ':' + data.tag.value + ' (added, ' + offset + ')');
    },
    onTagResize      : function(obj, data) {
      obj = null;
      var offset = 'offset:start=' + data.tag.offset.start + ', offset:end=' + data.tag.offset.end;
      $("#freeform-output").val(data.tag.type + ':' + data.tag.value + ' (resized, ' + offset + ')');
    },
    onTagRemove      : function(obj, data) {
      obj = null;
      var offset = 'offset:start=' + data.tag.offset.start + ', offset:end=' + data.tag.offset.end;
      $("#freeform-output").val(data.tag.type + ':' + data.tag.value + ' (removed, ' + offset + ')');
    }
  };
  $(".freeform").grabtag(config);
</script>

<div id="freeform-config" class="clearfix"></div>
<p class="freeform">Lorem ipsum...</p></xmp>

<h3><a name="config">Configuration Options</a></h3>
<h4>Pre-selections</h4>
<p>Enabled as shown in <a href="#example1">Example 1</a> for the <em>volume</em> tag.<br>The region should be marked-up in HTML5 as: ...&lt;span data-grabtag="volume"&gt;242(1)&lt;/span&gt;...</p>
<dl>
  <dt>config_ele</dt><dd>The element where a control panel with clickable tag types will be created</dd>
  <dt>multitag</dt><dd>true or false for tagging with the same tag, default is false</dd>
  <dt>tags</dt><dd>An array of tags such as ["this", "that", "other"] or a hash of tags in grouped arrays such as { "group1" : ["this", "that", "other"], "group2" : ["here", "there", "nowhere"] }. Each tag can also be optionally styled as shown in example 1 above, otherwise a sample of 15 included colors will be drawn.</dd>
  <dt>active_group</dt><dd>Group of tags to be made active on load (if tags are arranged in groups)</dd>
  <dt>sticky</dt><dd>true or false to cause tag to be applied immediately after selections in extended element, default is false</dd>
  <dt>sticky_tag</dt><dd>Tag to be made sticky on load</dd>
  <dt>onActivate(obj, data)</dt><dd>Callback function that executes after the control panel loads<br>obj = jQuery object being extended<br>data = { 'content' : 'marked up content' }<dd>
  <dt>beforeTag(obj, tag)</dt><dd>Callback function that executes before a tag is created<br>obj = jQuery object being extended<br>tag = jQuery object for chosen tag type</dd>
  <dt>onTag(obj, tag, data)</dt><dd>Callback function that executes after a tag is created<br>obj = jQuery object being extended<br>tag = jQuery object for chosen tag type<br>data = { 'tag' : { 'type' : 'author', 'value' : 'Shorthouse', 'offset' : { 'start' : 22, 'end' : 32 } }, 'content' : 'marked up content' }</dd>
  <dt>onTagResize(obj, data)</dt><dd>Callback function that executes after a tag is resized<br>obj = jQuery object being extended<br> data = { 'tag' : { 'type' : 'author', 'value' : 'D.P. Shorthouse', 'offset' : { 'start' : 17, 'end' : 32 } }, 'content' : 'marked up content' }</dd>
  <dt>onTagRemove(obj, data)</dt><dd>Callback function that executes after a tag is removed<br>obj = jQuery object being extended<br>data = { 'tag' : { 'type' : 'author', 'value' : 'D.P. Shorthouse', 'offset' : { 'start' : 17, 'end' : 32 } }, 'content' : 'marked up content' }.<br><strong>NOTE:</strong> a right-click context menu is drawn using <a href="http://www.JavascriptToolbox.com/lib/contextmenu/">jquery.contextMenu.js</a>. In its absence, this callback will not be executed.</dd>
  <dt>onMultitagWarning(obj, tag)</dt><dd>Callback function that overrides default warning when user attempts to create multiple tags of same type while <strong>multitag</strong> set to false<br>obj = jQuery object being extended<br>tag = jQuery tag that was clicked</dd>
  <dt>onOverlapWarning()</dt><dd>Callback function that overrides default warning when user expands tag into another tag or when user attempts to create tag within another tag</dd>
</dl>
<h3>Additional Methods</h3>
<dl>
  <dt>$(selector).grabtag("remove_all");</dt><dd>Removes all tags from selector</dd>
  <dt>$(selector).grabtag("destroy");</dt><dd>Destroys (unbinds) extension from selector<dd>
</dl>

<h3><a name="limitations">Limitations</a></h4>
<p>This plug-in assumes there is no additional HTML mark-up in the element being extended except for pre-selected &lt;span&gt; elements with matching tag types <em>i.e.</em> tag types listed in the <strong>tags</strong> configuration object. Any additional HTML will be stripped. Offset values returned in callback functions are measured in raw text counts and do not include any underlying HTML, including that of pre-selected tags. These actions are performed because HTML mark-up wreaks havoc on range selections, dynamically created and adjusted mark-up, and resultant offset counts.</p>
<p>Internet Explorer &lt; 9 will not (currently) work because it does not support the range selection method getRangeAt(0).</p>

<h3><a name="download">Downloads</a></h3>
<p>jQuery plug-in: <%= link_to 'jquery.grabtag.js', root_url.to_s << 'assets/jquery.grabtag.js' %>, 8.9kb minified</p>
<p>jQuery contextMenu: <%= link_to 'jquery.contextMenu.js', root_url.to_s << 'assets/jquery.contextMenu.js' %>, from <a href="http://www.JavascriptToolbox.com/lib/contextmenu/">Matt Kruse</a>.</p>
<p>Stylesheet: <%= link_to 'grabtag.css', root_url.to_s << 'assets/grabtag.css' %></p>